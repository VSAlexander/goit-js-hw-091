{"mappings":"YA4DA,SAASA,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IArEMQ,SAASC,cAAc,SAyE/BC,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBASN,IARA,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALb,MAAOiB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAGvBC,EAAaC,OAAOJ,EAAMK,OACxBC,EAAYF,OAAOH,EAAKI,OACxBE,EAAcH,OAAOF,EAAOG,OAEzBG,EAAI,EAAGA,GAAKD,EAAaC,IAChC1B,EAAc0B,EAAGL,GACdM,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MACjB2B,QAAQC,IAAI,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAE3D8B,OAAM,SAAAJ,G,IAAG3B,EAAQ2B,EAAR3B,SAAUC,EAAK0B,EAAL1B,MAClB2B,QAAQC,IAAI,sBAAqCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAG3DmB,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector('.form');\n\n// const promises = [];\n\n// в таку функцію треба закидувати номер позиції проміса та час його затримки\n// як створити масив промісів? треба створити пустий масив, потім туди закидувати проміси у вигляді об'єктів\n// for (i = 0; i >= amount.value; i ++) { }\n\n// function createPromise(position, delay) {}\n// const shouldResolve = Math.random() > 0.3;\n// if (shouldResolve) {\n// } else {\n// }\n// let a;\n\n// function createPromiseArray(delay, step, amount) {\n//   for (let position = 1; position <= amount; position++) {\n//     if (position === 1) {\n//       promises.push(\n//         new Promise((resolve, reject) => {\n//           const shouldResolve = Math.random() > 0.3;\n//           setTimeout(() => {\n//             if (shouldResolve) {\n//               resolve({ position, delay });\n//             } else {\n//               reject({ position, delay });\n//             }\n//           }, delay);\n//         })\n//       );\n//     } else {\n//       promises.push(\n//         new Promise((resolve, reject) => {\n//           const shouldResolve = Math.random() > 0.3;\n//           delay = delay + step * position;\n//           setTimeout(() => {\n//             if (shouldResolve) {\n//               resolve({ position, delay });\n//             } else {\n//               reject({ position, delay });\n//             }\n//           }, delay);\n//         })\n//       );\n//     }\n//   }\n// }\n\n// createPromiseArray(2000, 1000, 3);\n// console.log(promises);\n\n// for (let i = 1; i <= 3; i++) {\n//   promises.push(i);\n// }\n\n// console.log(promises);\n// const newPromises = promises.map(promise => {\n\n// })\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  let delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n\n  for (let i = 1; i <= amountValue; i++) {\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delayValue += stepValue;\n  }\n});\n\n// const newPromises = promises.map(promise => {\n\n//   createPromise;\n// });\n\n// // console.log(newPromises);\n\n//  for (let position = 1; position <= amountValue; position += 1) {\n//    setTimeout(() => {\n//      console.log(position, delayValue, stepValue, amountValue);\n//      setTimeout(() => {\n//        createPromise(position, delayValue + stepValue * position)\n//          .then(res => onSuccess(res.position, res.delay))\n//          .catch(error => onReject(error.position, error.delay));\n//      }, delayValue);\n//    }, stepValue);\n//  }\n"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","delayValue","Number","value","stepValue","amountValue","i","then","param","console","log","concat","catch"],"version":3,"file":"03-promises.6b98579c.js.map"}